apiVersion: v1
kind: Pod
metadata:
  name: digitaltwin-${POD_NAME}
  labels:
    app: DigitalTwin
    instance: ${POD_NAME}
spec:
  restartPolicy: Always

  containers:
    
    - name: mosquitto
      image: docker.io/eclipse-mosquitto:latest
      ports:
        - containerPort: 1883
          hostPort: ${HOST_PORT}
          protocol: TCP
      volumeMounts:
        - name: mosquitto-conf
          mountPath: /mosquitto/config 
          ## readOnly: true.  for acl file, it require to write


    - name: timescaledb
      image: docker.io/timescale/timescaledb:latest-pg15
      ports:
        - containerPort: 5432
          protocol: TCP
      command: 
          - /bin/bash
          - -c
          - |
            echo "üöÄ Avvio TimescaleDB con setup automatico..."
            
            # Imposta sempre le variabili d'ambiente per PostgreSQL
            export POSTGRES_HOST_AUTH_METHOD=trust
            export POSTGRES_DB=mqtt_data
            export POSTGRES_USER=mqtt_user
            export POSTGRES_PASSWORD=mqtt_password
            export POSTGRES_INITDB_ARGS="--auth-host=trust --auth-local=trust"
            
            # Se il database non esiste, sar√† inizializzato automaticamente
            if [ ! -f /var/lib/postgresql/data/PG_VERSION ]; then
              echo "üìä Database non esistente, inizializzazione automatica..."
            else
              echo "üìÇ Database esistente trovato, avvio normale"
            fi
            
            echo "üîß Avvio PostgreSQL/TimescaleDB con variabili impostate..."
            
            # Avvia il processo normale di PostgreSQL
            exec docker-entrypoint.sh postgres
        
      environment:
       # - name: POSTGRES_HOST_AUTH_METHOD
       #   value: "trust"
       # - name: POSTGRES_DB
       #   value: "mqtt_data"
       # - name: POSTGRES_USER
       #   value: "mqtt_user"
       # - name: POSTGRES_PASSWORD
       #   value: "mqtt_password"
      volumeMounts:
        - name: timescale-data
          mountPath: /var/lib/postgresql/data # db will write here
        - name: timescale-init
          mountPath: /docker-entrypoint-initdb.d # postgres convenction, it will look for sql files here
          readOnly: true

    - name: go-client
      image: docker.io/alpine:latest
      workingDir: /app
      command: ["./mqtt_to_timescale"]
      args: ["${POD_NAME}"]
      environment:
        - name: MQTT_BROKER
          value: "tcp://localhost:1883"
        - name: DB_HOST
          value: "localhost"
        - name: DB_PORT
          value: "5432"
        - name: DB_NAME
          value: "mqtt_data"
        - name: DB_USER
          value: "mqtt_user"
        - name: DB_PASSWORD
          value: "mqtt_password"
      volumeMounts:
        - name: go-binary
          mountPath: /app/mqtt_to_timescale   # ‚Üê Percorso del file nel container
          subPath: mqtt_to_timescale         # ‚Üê Nome del file dalla directory go/
          readOnly: true


    - name: grafana
      image: docker.io/grafana/grafana:latest
      ports:
        - containerPort: 3000
          hostPort: ${GRAFANA_PORT} 
          protocol: TCP
      environment:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin123"  
        - name: GF_USERS_ALLOW_SIGN_UP
          value: "false"
        - name: GF_INSTALL_PLUGINS
          value: "grafana-clock-panel,grafana-simple-json-datasource"
      volumeMounts:
        - name: grafana-data
          mountPath: /var/lib/grafana  # ‚Üê Storage configurazioni Grafana
        - name: grafana-config
          mountPath: /etc/grafana/provisioning  # ‚Üê Configurazioni automatiche
          readOnly: true
        - name: grafana-ini
          mountPath: /etc/grafana/grafana.ini  # ‚Üê File configurazione principale
          subPath: grafana.ini
          readOnly: true




  volumes:
    - name: mosquitto-conf
      hostPath:
        path: /Users/giuseppe/Documents/Software/ProvaLetturaMQTT/mosquitto
        type: Directory
    
    - name: go-binary
      hostPath:
        path: /Users/giuseppe/Documents/Software/ProvaLetturaMQTT/go
        type: Directory

    - name: timescale-data
      #¬†emptyDir: {}   # removed with the pod, temporary volume
      hostPath:
       path: /Users/giuseppe/Documents/Software/ProvaLetturaMQTT/timescale/data/${POD_NAME}
       type: DirectoryOrCreate

    - name: timescale-init
      hostPath:
        path: /Users/giuseppe/Documents/Software/ProvaLetturaMQTT/timescale/init
        type: Directory

    - name: grafana-data
      hostPath:
        path: /Users/giuseppe/Documents/Software/ProvaLetturaMQTT/grafana/data/${POD_NAME}
        type: DirectoryOrCreate

    - name: grafana-config
      hostPath:
        path: /Users/giuseppe/Documents/Software/ProvaLetturaMQTT/grafana/provisioning
        type: Directory

    - name: grafana-ini
      hostPath:
        path: /Users/giuseppe/Documents/Software/ProvaLetturaMQTT/grafana
        type: Directory

    